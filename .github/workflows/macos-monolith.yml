name: macos-monolith
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: macOS deps + build
        if: runner.os == 'macOS'
        run: |
          set -e
          brew update
          for f in gpgme libassuan libgpg-error gettext; do
            brew list "$f" >/dev/null 2>&1 || brew install "$f"
            if [ -n "$(brew outdated -q "$f")" ]; then brew upgrade "$f"; fi
          done
          for pkg in gpgmepy gnupg gnutls popt python pkg-config openldap lmdb jansson libtirpc flex bison cups libarchive dbus glib autoconf automake libtool git gdb perl cpanminus swig krb5 readline libxcrypt icu4c utf8proc cmocka openssl@3 python-markdown; do
            brew list "$pkg" >/dev/null 2>&1 || brew install "$pkg"
          done
          cpanm Parse::Yapp

          B=$(brew --prefix)
          GP=$(brew --prefix gpgme)
          AS=$(brew --prefix libassuan)
          GE=$(brew --prefix libgpg-error)
          GT=$(brew --prefix gettext)
          TI=$(brew --prefix libtirpc)
          AR=$(brew --prefix libarchive)
          KR=$(brew --prefix krb5)
          OL=$(brew --prefix openldap)
          CU=$(brew --prefix cups)
          GN=$(brew --prefix gnutls)
          RL=$(brew --prefix readline)
          LX=$(brew --prefix libxcrypt)
          IC=$(brew --prefix icu4c)
          U8=$(brew --prefix utf8proc)
          O3=$(brew --prefix openssl@3)
          FB=$(brew --prefix bison)
          FX=$(brew --prefix flex)

          export PATH="$B/opt/python@3.13/libexec/bin:$FB/bin:$FX/bin:$GP/bin:$B/bin:$PATH"
          export PKG_CONFIG_PATH="$IC/lib/pkgconfig:$U8/lib/pkgconfig:$GN/lib/pkgconfig:$GP/lib/pkgconfig:$AS/lib/pkgconfig:$GE/lib/pkgconfig:$TI/lib/pkgconfig:$AR/lib/pkgconfig:$KR/lib/pkgconfig:$OL/lib/pkgconfig:$CU/lib/pkgconfig:$O3/lib/pkgconfig:$B/lib/pkgconfig:$B/share/pkgconfig"
          export CPPFLAGS="-I$RL/include -I$GN/include -I$LX/include -I$IC/include -I$U8/include -I$O3/include -I$B/include -I$GP/include -I$AS/include -I$GE/include -I$GT/include -I$AR/include -I$KR/include -I$OL/include -I$CU/include -Wno-error=unused-command-line-argument -Qunused-arguments ${CPPFLAGS:-}"
          export LDFLAGS="-L$RL/lib -L$GN/lib -L$LX/lib -L$IC/lib -L$U8/lib -L$O3/lib -L$GP/lib -L$AS/lib -L$GE/lib -L$GT/lib -L$AR/lib -L$KR/lib -L$OL/lib -L$CU/lib ${LDFLAGS:-} -lcrypt -Wl,-rpath,@executable_path/lib"

          mkdir -p .ci
          printf '%s\n' '#ifndef HAVE_REALLOCARRAY' '#define reallocarray(p,nmemb,size) realloc_array((p),(size),(nmemb),0)' '#endif' > .ci/compat_darwin.h

          git checkout -- lib/ldb/wscript || true
          if ! grep -q "test_ldb_comparison_fold'.*enabled=False" lib/ldb/wscript; then
            sed -E -i '' "s/\('test_ldb_comparison_fold',/\('test_ldb_comparison_fold', enabled=False,/" lib/ldb/wscript
          fi

          cat > .ci/bison <<'EOF'
          #!/bin/sh
          REAL="$(brew --prefix bison)/bin/bison"
          args=""
          for a in "$@"; do
            [ "$a" = "--no-line" ] && a="--no-lines"
            args="$args \"$a\""
          done
          eval exec "$REAL" $args
          EOF
          chmod +x .ci/bison
          export PATH="$(pwd)/.ci:$PATH"

          $B/bin/python3 -m venv --system-site-packages .venv
          . .venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install dnspython iso8601 pyasn1 setproctitle requests markdown cryptography

          PY="$(pwd)/.venv/bin/python"

          set +e
          CPPFLAGS="-include $(pwd)/.ci/compat_darwin.h $CPPFLAGS" CFLAGS="-include $(pwd)/.ci/compat_darwin.h ${CFLAGS:-}" \
          PKG_CONFIG_PATH="$PKG_CONFIG_PATH" LDFLAGS="$LDFLAGS" PYTHON="$PY" \
          ./configure --without-acl-support --without-gettext --bundled-libraries=ALL \
            --nonshared-binary=net,rpcclient,smbcacls,smbcontrol,smbcquotas,smbd/smbd,smbget,smbpasswd,smbstatus,smbtree,tdbbackup,tdbtool,testparm,pdbedit \
            --with-static-modules=vfs_fruit,vfs_streams_xattr,vfs_catia,vfs_acl_xattr,vfs_acl_tdb,vfs_xattr_tdb,vfs_recycle,vfs_shadow_copy2,vfs_full_audit,vfs_extd_audit,vfs_readahead,vfs_preopen,vfs_aio_pthread,vfs_fake_perms,vfs_readonly,vfs_offline,vfs_time_audit,vfs_commit,vfs_crossrename,vfs_dirsort,vfs_expand_msdfs,vfs_default_quota,vfs_streams_depot,vfs_syncops,vfs_widelinks,vfs_worm,vfs_audit,auth_unix,auth_winbind,auth_builtin,pdb_tdbsam,pdb_smbpasswd,pdb_ldapsam \
            --with-shared-modules=idmap_tdb,idmap_tdb2,idmap_rid,idmap_autorid,idmap_ad,idmap_ldap,idmap_script,idmap_nss,idmap_rfc2307,pdb_wbc_sam \
            --without-gpgme
          st=$?
          set -e
          if [ "$st" -ne 0 ]; then
            echo "----- HEAD bin/config.log (first 200) -----" || true
            [ -f bin/config.log ] && sed -n '1,200p' bin/config.log || true
            echo "----- TAIL bin/config.log (last 400) -----" || true
            [ -f bin/config.log ] && tail -n 400 bin/config.log || true
            exit "$st"
          fi

          CFLAGS="$CFLAGS -include $(pwd)/.ci/compat_darwin.h" \
          CPPFLAGS="$CPPFLAGS -include $(pwd)/.ci/compat_darwin.h" \
          make JOBS="$(sysctl -n hw.ncpu)"

      - name: Bundle dylibs
        if: runner.os == 'macOS'
        run: |
          set -euo pipefail
          B=$(brew --prefix)
          bundle() {
            prog="$1"
            mkdir -p "out-$prog" "out-$prog/lib"
            : > "out-$prog/lib/.origmap"
            cp "bin/$prog" "out-$prog/$prog"

            deps_list() { otool -L "$1" | awk '/^\t/ {print $1}' | grep -Ev '^(/usr/lib|/System/Library)'; }
            map_add() { echo "$1|$2" >> "out-$prog/lib/.origmap"; }
            map_get() { awk -F'|' -v k="$1" '$1==k{print $2;exit}' "out-$prog/lib/.origmap"; }
            resolve_dep() {
              ref="$1"; dep="$2"
              case "$dep" in
                @loader_path/*) echo "$(dirname "$ref")/${dep#@loader_path/}"; return 0 ;;
                @rpath/*)
                  for r in $(otool -l "$ref" | awk '/LC_RPATH/{getline; print $2}'); do
                    case "$r" in
                      @loader_path/*) d="$(dirname "$ref")/${r#@loader_path/}" ;;
                      @executable_path/*) d="$(pwd)/out-$prog/${r#@executable_path/}" ;;
                      /*) d="$r" ;;
                      *) d="" ;;
                    esac
                    [ -n "$d" ] && [ -f "$d/${dep#@rpath/}" ] && { echo "$d/${dep#@rpath/}"; return 0; }
                  done
                  ;;
                /*) echo "$dep"; return 0 ;;
              esac
              n="$(basename "$dep")"
              for p in "$B"/opt/*/lib "$B"/lib; do
                [ -f "$p/$n" ] && { echo "$p/$n"; return 0; }
              done
              return 1
            }

            initial="$(deps_list out-$prog/$prog || true)"
            queue=""
            for dep in $initial; do
              abs="$(resolve_dep out-$prog/$prog "$dep")" || continue
              base="$(basename "$abs")"
              if [ ! -f "out-$prog/lib/$base" ]; then
                cp -pRL "$abs" "out-$prog/lib/$base"
                install_name_tool -id "@rpath/$base" "out-$prog/lib/$base" || true
                map_add "$base" "$abs"
                queue="$queue $base"
              fi
            done

            while [ -n "$queue" ]; do
              next=""
              for b in $queue; do
                orig="$(map_get "$b")"
                for sub in $(deps_list "$orig" || true); do
                  sabs="$(resolve_dep "$orig" "$sub")" || continue
                  sbase="$(basename "$sabs")"
                  if [ ! -f "out-$prog/lib/$sbase" ]; then
                    cp -pRL "$sabs" "out-$prog/lib/$sbase"
                    install_name_tool -id "@rpath/$sbase" "out-$prog/lib/$sbase" || true
                    map_add "$sbase" "$sabs"
                    next="$next $sbase"
                  fi
                  install_name_tool -change "$sabs" "@rpath/$sbase" "out-$prog/lib/$b" || true
                done
              done
              queue="$(printf '%s\n' $next | tr ' ' '\n' | awk 'NF' | sort -u | tr '\n' ' ')"
            done

            for dep in $initial; do
              abs="$(resolve_dep out-$prog/$prog "$dep")" || continue
              base="$(basename "$abs")"
              install_name_tool -change "$abs" "@rpath/$base" out-$prog/$prog || true
            done
            install_name_tool -add_rpath "@executable_path/lib" out-$prog/$prog || true

            /usr/bin/codesign --force -s - --timestamp=none out-$prog/$prog
            find "out-$prog/lib" -type f -name '*.dylib' -print0 | xargs -0 -I{} /usr/bin/codesign --force -s - --timestamp=none {}
            /usr/bin/codesign --verify --deep --strict out-$prog/$prog

            if otool -L out-$prog/$prog | grep -q '/opt/homebrew'; then
              otool -L out-$prog/$prog
              exit 1
            fi
            otool -L out-$prog/$prog

            tar -czf "$prog-macos-monolith.tar.gz" -C "out-$prog" .
          }

          for p in net rpcclient smbcacls smbcontrol smbcquotas smbd smbget smbpasswd smbstatus smbtree tdbbackup tdbtool testparm pdbedit; do
            bundle "$p"
          done

      - name: Upload config logs
        if: always() && runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: samba-config-logs
          path: bin/config.log
          if-no-files-found: warn

      - name: Upload net
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: net-macos-monolith
          path: net-macos-monolith.tar.gz
          if-no-files-found: error

      - name: Upload rpcclient
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: rpcclient-macos-monolith
          path: rpcclient-macos-monolith.tar.gz
          if-no-files-found: error

      - name: Upload smbcacls
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: smbcacls-macos-monolith
          path: smbcacls-macos-monolith.tar.gz
          if-no-files-found: error

      - name: Upload smbcontrol
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: smbcontrol-macos-monolith
          path: smbcontrol-macos-monolith.tar.gz
          if-no-files-found: error

      - name: Upload smbcquotas
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: smbcquotas-macos-monolith
          path: smbcquotas-macos-monolith.tar.gz
          if-no-files-found: error

      - name: Upload smbd
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: smbd-macos-monolith
          path: smbd-macos-monolith.tar.gz
          if-no-files-found: error

      - name: Upload smbget
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: smbget-macos-monolith
          path: smbget-macos-monolith.tar.gz
          if-no-files-found: error

      - name: Upload smbpasswd
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: smbpasswd-macos-monolith
          path: smbpasswd-macos-monolith.tar.gz
          if-no-files-found: error

      - name: Upload smbstatus
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: smbstatus-macos-monolith
          path: smbstatus-macos-monolith.tar.gz
          if-no-files-found: error

      - name: Upload smbtree
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: smbtree-macos-monolith
          path: smbtree-macos-monolith.tar.gz
          if-no-files-found: error

      - name: Upload tdbbackup
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: tdbbackup-macos-monolith
          path: tdbbackup-macos-monolith.tar.gz
          if-no-files-found: error

      - name: Upload tdbtool
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: tdbtool-macos-monolith
          path: tdbtool-macos-monolith.tar.gz
          if-no-files-found: error

      - name: Upload testparm
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: testparm-macos-monolith
          path: testparm-macos-monolith.tar.gz
          if-no-files-found: error

      - name: Upload pdbedit
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: pdbedit-macos-monolith
          path: pdbedit-macos-monolith.tar.gz
          if-no-files-found: error
